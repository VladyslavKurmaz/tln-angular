{
  "env": {
  },
  "stages":{
    "prereq":{
      "shell":[
        "envsubst > sonar-project.properties < sonar-project.properties.template",
        "envsubst > .env < .env.template",
        "npm i"
      ]
    },
    "build":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "ng build"
      ]
    },
    "test":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "ng test ${COMPONENT_ID} --code-coverage"
      ]
    },
    "lint":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "ng lint ${COMPONENT_ID} --format=prose --type-check=true"
      ]
    },
    "build.prod":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "ng build --configuration=production"
     ]
    },
    "serve":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "ng serve --host=${COMPONENT_PARAM_LSTN} --port=${COMPONENT_PARAM_PORT}"
      ]
    },
    "sonar":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "~/projects/sonar-scanner-3.0.3.778/bin/sonar-scanner -X"
      ]
    },
    "docker.build":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "rm -rf ./target || true",
        "mkdir target",
        "mkdir target/conf.d",
        "if [ -d ./ssl ]",
        "then",
        "  envsubst '\\${COMPONENT_ID} \\${COMPONENT_PARAM_HOST}' > ./target/conf.d/default.conf < ./default.conf.https.template",
        "  cp -r ./ssl ./target/",
        "else",
        "  envsubst '\\${COMPONENT_PARAM_HOST}' > ./target/conf.d/default.conf < ./default.conf.template",
        "fi",
        "docker build \\",
        "  -t ${COMPONENT_ID}:${COMPONENT_VERSION} ."
      ]
    },
    "docker.run":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "docker run -d --rm \\",
        "  -p ${COMPONENT_PARAM_PORT}:80 \\",
        "  -p ${COMPONENT_PARAM_PORTS}:443 \\",
        "  --name ${COMPONENT_ID} ${COMPONENT_ID}:${COMPONENT_VERSION}"
      ]
    },
    "docker.save":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "docker save -o ${COMPONENT_ID}-${COMPONENT_VERSION}.tar ${COMPONENT_ID}:${COMPONENT_VERSION}"
      ]
    },
    "docker.load":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "docker load -i ${COMPONENT_ID}-${COMPONENT_VERSION}.tar"
      ]
    },
    "docker.stop":{
      "shell":[
        "export $(cat ./.env | grep -v ^# | xargs)",
        "docker stop ${COMPONENT_ID}",
        "docker rmi ${COMPONENT_ID}:${COMPONENT_VERSION}"
      ]
    }
  }
}