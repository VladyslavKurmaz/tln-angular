module.exports = {
  tags: () => [],
  options: () => [],
  inherits: () => [],
  depends: () => [],
  variables: () => [],
  steps: () => [
    {
      id: 'prereq',
      desc: '',
      script: (context) => [
        "envsubst > sonar-project.properties < sonar-project.properties.template",
        "envsubst > .env < .env.template",
        "npm i"
      ]
    },
    {
      id: 'build',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "ng build"
      ]
    },
    {
      id: 'test',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "ng test ${TLN_COMPONENT_ID} --code-coverage"
      ]
    },
    {
      id: 'lint',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "ng lint ${TLN_COMPONENT_ID} --format=prose --type-check=true"
      ]
    },
    {
      id: 'sonar',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "#~/projects/sonar-scanner-3.0.3.778/bin/sonar-scanner -X"
      ]
    },
    {
      id: 'build.prod',
      desc: '',
      script: (context) => [
          "export $(cat ./.env | grep -v ^# | xargs)",
          "ng build --configuration=production"
      ]
    },
    {
      id: 'serve',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "ng serve --host=${TLN_COMPONENT_PARAM_LSTN} --port=${TLN_COMPONENT_PARAM_PORT}"
      ]
    },
    {
      id: 'docker.build',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "rm -rf ./target || true",
        "mkdir target",
        "mkdir target/conf.d",
        "if [ -d ./ssl ]",
          "then",
        "  envsubst '\\${TLN_COMPONENT_ID} \\${TLN_COMPONENT_PARAM_HOST}' > ./target/conf.d/default.conf < ./default.conf.https.template",
        "  cp -r ./ssl ./target/",
        "else",
        "  envsubst '\\${TLN_COMPONENT_PARAM_HOST}' > ./target/conf.d/default.conf < ./default.conf.template",
        "fi",
        "docker build \\",
        "  -t ${TLN_COMPONENT_ID}:${TLN_COMPONENT_VERSION} ."
      ]
    },
    {
      id: 'docker.run',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "docker run -d --rm \\",
        "  -p ${TLN_COMPONENT_PARAM_PORT}:80 \\",
        "  -p ${TLN_COMPONENT_PARAM_PORTS}:443 \\",
        "  --name ${TLN_COMPONENT_ID} ${TLN_COMPONENT_ID}:${TLN_COMPONENT_VERSION}"
      ]
    },
    {
      id: 'docker.save',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "docker save -o ${TLN_COMPONENT_ID}-${TLN_COMPONENT_VERSION}.tar ${TLN_COMPONENT_ID}:${TLN_COMPONENT_VERSION}"
      ]
    },
    {
      id: 'docker.load',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "docker load -i ${TLN_COMPONENT_ID}-${TLN_COMPONENT_VERSION}.tar"
      ]
    },
    {
      id: 'docker.stop',
      desc: '',
      script: (context) => [
        "export $(cat ./.env | grep -v ^# | xargs)",
        "docker stop ${TLN_COMPONENT_ID}",
        "docker rmi ${TLN_COMPONENT_ID}:${TLN_COMPONENT_VERSION}"
      ]
    }
  ],
  components: () => []
};
